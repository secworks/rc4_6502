//======================================================================
// rc4.a65
// -------
// An implementation of the RC4 stream cipher.
// The code provides a function for initializing the cipher given
// a 128 bit key. There also also a function for encrypting and
// decrypting a given area.
//
//
// (c) 2017 Joachim Str√∂mbergson
//======================================================================

//------------------------------------------------------------------
// Labels
//------------------------------------------------------------------
// keylen in bytes. Must be 16, 32.
.label keylen = 16

.label mem_start = $6000
.label mem_end = $7532


//------------------------------------------------------------------
// Macros.
//------------------------------------------------------------------
.macro save_regs()
{
                stx x_tmp
}

.macro restore_regs()
{
                ldx x_tmp
}


//------------------------------------------------------------------
// Basic start code.
//------------------------------------------------------------------
.pc = $0801     "Basic uppstart"
	        :BasicUpstart(start)


//------------------------------------------------------------------
// start
// Simmple program that shows how the rc4 cipher init and update
// routines can be used to enchipher or decipher an area based
// on a given key.
//
//
// The keystream byte should be used to XOR the bytes in the
// data to be encrypted, decrypted.
//------------------------------------------------------------------
* = $1000     "RC4 example program"
start:
//                jmp interactive
                jmp encdec

//------------------------------------------------------------------
// The encdec program perform a secquence of encipher a memory
// area. Performing a second init and checking the init state.
// If the init state is correct the memory area is deciphered.
//------------------------------------------------------------------
encdec:
                jsr rc4_init
                jsr encdec_area

                jsr rc4_init
                jsr check_state
                lda state_status
                bne encdec1
                jsr encdec_area
                rts        
encdec1:
                jsr error_state
                rts


//------------------------------------------------------------------
// error_state:
// Print a very descriptive error message.
//------------------------------------------------------------------
error_state:
                ldx #$00
err1:
                lda err_string, x
                sta $0400, x
                inx
                cpx #$05
                bne err1
                rts


//------------------------------------------------------------------
// check_state
// Check four bytes in the rc4 state after init to see if the
// state has correctly been initalized. This can only happen if
// the key was correct.
//------------------------------------------------------------------
check_state:
                lda state
                cmp state_expected
                bne check1

                lda state + $3f
                cmp state_expected + 1
                bne check1

                lda state + $7f
                cmp state_expected + 2
                bne check1

                lda state + $ff
                cmp state_expected + 3
                bne check1

                lda #$00
                sta state_status
                rts
check1:
                lda #$01
                sta state_status
                rts


//------------------------------------------------------------------
// encdec_area
// Encipher or decipher the area mem_start..mem_end.
//------------------------------------------------------------------
encdec_area:
                lda #<mem_start
                sta $f8
                lda #>mem_start
                sta $f9

                ldy #$00
enc2:
                jsr rc4_update
                lda ($f8), y
                eor keystream_byte
                sta ($f8), y
                lda $f9
                cmp #>mem_end
                beq enc1
                iny
                bne enc2
                inc $f9
                jmp enc2
enc1:           iny
                cpy #<mem_end
                bne enc2
                rts


//------------------------------------------------------------------
// The interactive program calls rc4_init with the given key in
// the key table. The program then repeatedly calls rc4_update to
// get a new keystream byte every time a key is pressed.
//
// Dumps the state, pointers and keystream onto the screen.
//------------------------------------------------------------------
interactive:
                jsr rc4_init
                jsr rc4_dump_state
                lda #$00
                sta $f8

key_scan:
                jsr $ffe4
                beq key_scan
                cmp #$0d
                beq done
                jsr rc4_update
                lda keystream_byte
                ldx $f8
                sta $0600, x
                inc $f8
                jsr rc4_dump_state
                dec $d020
                jmp key_scan
done:
                rts


//------------------------------------------------------------------
// rc4_init
// Initialize the rc4 state based on the given key.
//------------------------------------------------------------------
rc4_init:
                :save_regs()

                // Set initial state to identity array.
                ldx #$00
init1:          txa
                sta state, x
                inx
                bne init1


                // Loop over all positions using the i and j pointers.
                // Update j pointer using key material and state.
                lda #$00
                sta i_ptr
                sta j_ptr

init2:          lda i_ptr
                and #(keylen - 1)
                tax
                lda key, x
                clc
                adc j_ptr
                ldx i_ptr
                clc
                adc state, x
                sta j_ptr

                // Swap state bytes.
                ldx i_ptr
                lda state, x
                sta i_tmp
                ldx j_ptr
                lda state, x
                ldx i_ptr
                sta state, x
                ldx j_ptr
                lda i_tmp
                sta state, x

                inc i_ptr
                bne init2

                lda #$00
                sta i_ptr
                sta j_ptr
                sta keystream_byte

                :restore_regs()
                rts


//------------------------------------------------------------------
// rc4_update
// Update the rc4 state and generate the next keystream byte.
//------------------------------------------------------------------
rc4_update:
                :save_regs()

                // Update pointers.
                inc i_ptr
                ldx i_ptr
                lda state, x
                sta i_tmp
                clc
                adc j_ptr
                sta j_ptr

                // Swap bytes pointed to by i and j.
                tax
                lda state, x
                sta j_tmp
                lda i_tmp
                sta state, x
                ldx i_ptr
                lda j_tmp
                sta state, x

                // Add byte values and use as index for keystream byte.
                clc
                adc i_tmp
                tax
                lda state, x
                sta keystream_byte

                :restore_regs()
                rts


//------------------------------------------------------------------
// Support routines for debug and test.
//------------------------------------------------------------------
rc4_dump_state:
                ldx #$00
ds1:            lda state,x
                sta $0400,x
                dex
                bne ds1

                lda i_ptr
                sta $0518
                lda i_tmp
                sta $0519
                lda j_ptr
                sta $051b
                lda j_tmp
                sta $051c

                lda keystream_byte
                sta $051e
                rts

//------------------------------------------------------------------
// State table and variables.
//------------------------------------------------------------------
state_expected:
.byte $01, $9c, $7f, $07

state_status:
.byte $00

err_string:
.text "error!"

x_tmp:
.byte $00

i_ptr:
.byte $00

i_tmp:
.byte $00

j_ptr:
.byte $00

j_tmp:
.byte $00

keystream_byte:
.byte $00

state:
.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
.byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00

key:
.byte $01, $02, $03, $04, $05, $06, $07, $08, $09, $0a, $0b, $0c, $0d, $0e, $0f, $10


//======================================================================
// rc4.a65
//======================================================================
